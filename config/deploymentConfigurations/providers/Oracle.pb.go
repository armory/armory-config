// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.14.0
// source: proto/deploymentConfigurations/providers/Oracle.proto

package providers

import (
	permissions "github.com/austinthao5/golang_proto_test/config/deploymentConfigurations/permissions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for the clouddriver microservice.
type Oracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Accounts       []*OracleAccounts `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	PrimaryAccount string            `protobuf:"bytes,3,opt,name=primaryAccount,proto3" json:"primaryAccount,omitempty"`
	BakeryDefaults *OracleBakery     `protobuf:"bytes,4,opt,name=bakeryDefaults,proto3" json:"bakeryDefaults,omitempty"`
}

func (x *Oracle) Reset() {
	*x = Oracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oracle) ProtoMessage() {}

func (x *Oracle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oracle.ProtoReflect.Descriptor instead.
func (*Oracle) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{0}
}

func (x *Oracle) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Oracle) GetAccounts() []*OracleAccounts {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *Oracle) GetPrimaryAccount() string {
	if x != nil {
		return x.PrimaryAccount
	}
	return ""
}

func (x *Oracle) GetBakeryDefaults() *OracleBakery {
	if x != nil {
		return x.BakeryDefaults
	}
	return nil
}

type OracleAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment             string                   `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	RequiredGroupMembership []string                 `protobuf:"bytes,3,rep,name=requiredGroupMembership,proto3" json:"requiredGroupMembership,omitempty"`
	Permissions             *permissions.Permissions `protobuf:"bytes,4,opt,name=permissions,proto3" json:"permissions,omitempty"`
	CompartmentId           string                   `protobuf:"bytes,5,opt,name=compartmentId,proto3" json:"compartmentId,omitempty"`
	UserId                  string                   `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	Fingerprint             string                   `protobuf:"bytes,7,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	SshPrivateKeyFilePath   string                   `protobuf:"bytes,8,opt,name=sshPrivateKeyFilePath,proto3" json:"sshPrivateKeyFilePath,omitempty"`
	PrivateKeyPassphrase    string                   `protobuf:"bytes,9,opt,name=privateKeyPassphrase,proto3" json:"privateKeyPassphrase,omitempty"`
	TenancyId               string                   `protobuf:"bytes,10,opt,name=tenancyId,proto3" json:"tenancyId,omitempty"`
	Region                  string                   `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *OracleAccounts) Reset() {
	*x = OracleAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleAccounts) ProtoMessage() {}

func (x *OracleAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleAccounts.ProtoReflect.Descriptor instead.
func (*OracleAccounts) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{1}
}

func (x *OracleAccounts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OracleAccounts) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *OracleAccounts) GetRequiredGroupMembership() []string {
	if x != nil {
		return x.RequiredGroupMembership
	}
	return nil
}

func (x *OracleAccounts) GetPermissions() *permissions.Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *OracleAccounts) GetCompartmentId() string {
	if x != nil {
		return x.CompartmentId
	}
	return ""
}

func (x *OracleAccounts) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OracleAccounts) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *OracleAccounts) GetSshPrivateKeyFilePath() string {
	if x != nil {
		return x.SshPrivateKeyFilePath
	}
	return ""
}

func (x *OracleAccounts) GetPrivateKeyPassphrase() string {
	if x != nil {
		return x.PrivateKeyPassphrase
	}
	return ""
}

func (x *OracleAccounts) GetTenancyId() string {
	if x != nil {
		return x.TenancyId
	}
	return ""
}

func (x *OracleAccounts) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type OracleBakery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateFile       string              `protobuf:"bytes,1,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
	BaseImages         []*OracleBaseImages `protobuf:"bytes,2,rep,name=baseImages,proto3" json:"baseImages,omitempty"`
	AvailabilityDomain string              `protobuf:"bytes,3,opt,name=availabilityDomain,proto3" json:"availabilityDomain,omitempty"`
	SubnetId           string              `protobuf:"bytes,4,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	InstanceShape      string              `protobuf:"bytes,5,opt,name=instanceShape,proto3" json:"instanceShape,omitempty"`
}

func (x *OracleBakery) Reset() {
	*x = OracleBakery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleBakery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleBakery) ProtoMessage() {}

func (x *OracleBakery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleBakery.ProtoReflect.Descriptor instead.
func (*OracleBakery) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{2}
}

func (x *OracleBakery) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

func (x *OracleBakery) GetBaseImages() []*OracleBaseImages {
	if x != nil {
		return x.BaseImages
	}
	return nil
}

func (x *OracleBakery) GetAvailabilityDomain() string {
	if x != nil {
		return x.AvailabilityDomain
	}
	return ""
}

func (x *OracleBakery) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *OracleBakery) GetInstanceShape() string {
	if x != nil {
		return x.InstanceShape
	}
	return ""
}

type OracleBaseImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseImage              *OracleBaseImage `protobuf:"bytes,1,opt,name=baseImage,proto3" json:"baseImage,omitempty"`
	VirtualizationSettings *OracleVS        `protobuf:"bytes,2,opt,name=virtualizationSettings,proto3" json:"virtualizationSettings,omitempty"`
}

func (x *OracleBaseImages) Reset() {
	*x = OracleBaseImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleBaseImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleBaseImages) ProtoMessage() {}

func (x *OracleBaseImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleBaseImages.ProtoReflect.Descriptor instead.
func (*OracleBaseImages) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{3}
}

func (x *OracleBaseImages) GetBaseImage() *OracleBaseImage {
	if x != nil {
		return x.BaseImage
	}
	return nil
}

func (x *OracleBaseImages) GetVirtualizationSettings() *OracleVS {
	if x != nil {
		return x.VirtualizationSettings
	}
	return nil
}

type OracleBaseImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortDescription    string `protobuf:"bytes,2,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	DetailedDescription string `protobuf:"bytes,3,opt,name=detailedDescription,proto3" json:"detailedDescription,omitempty"`
	PackageType         string `protobuf:"bytes,4,opt,name=packageType,proto3" json:"packageType,omitempty"`
	TemplateFile        string `protobuf:"bytes,5,opt,name=templateFile,proto3" json:"templateFile,omitempty"`
}

func (x *OracleBaseImage) Reset() {
	*x = OracleBaseImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleBaseImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleBaseImage) ProtoMessage() {}

func (x *OracleBaseImage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleBaseImage.ProtoReflect.Descriptor instead.
func (*OracleBaseImage) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{4}
}

func (x *OracleBaseImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OracleBaseImage) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *OracleBaseImage) GetDetailedDescription() string {
	if x != nil {
		return x.DetailedDescription
	}
	return ""
}

func (x *OracleBaseImage) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

func (x *OracleBaseImage) GetTemplateFile() string {
	if x != nil {
		return x.TemplateFile
	}
	return ""
}

type OracleVS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseImageId string `protobuf:"bytes,1,opt,name=baseImageId,proto3" json:"baseImageId,omitempty"`
	SshUserName string `protobuf:"bytes,2,opt,name=sshUserName,proto3" json:"sshUserName,omitempty"`
}

func (x *OracleVS) Reset() {
	*x = OracleVS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleVS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleVS) ProtoMessage() {}

func (x *OracleVS) ProtoReflect() protoreflect.Message {
	mi := &file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleVS.ProtoReflect.Descriptor instead.
func (*OracleVS) Descriptor() ([]byte, []int) {
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP(), []int{5}
}

func (x *OracleVS) GetBaseImageId() string {
	if x != nil {
		return x.BaseImageId
	}
	return ""
}

func (x *OracleVS) GetSshUserName() string {
	if x != nil {
		return x.SshUserName
	}
	return ""
}

var File_proto_deploymentConfigurations_providers_Oracle_proto protoreflect.FileDescriptor

var file_proto_deploymentConfigurations_providers_Oracle_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x0e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x0e, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x73, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x79, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a,
	0x0c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x61, 0x6b, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x56, 0x53, 0x52, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc5,
	0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x08, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x56, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescOnce sync.Once
	file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescData = file_proto_deploymentConfigurations_providers_Oracle_proto_rawDesc
)

func file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescGZIP() []byte {
	file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescOnce.Do(func() {
		file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescData)
	})
	return file_proto_deploymentConfigurations_providers_Oracle_proto_rawDescData
}

var file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_deploymentConfigurations_providers_Oracle_proto_goTypes = []interface{}{
	(*Oracle)(nil),                  // 0: proto.providers.Oracle
	(*OracleAccounts)(nil),          // 1: proto.providers.OracleAccounts
	(*OracleBakery)(nil),            // 2: proto.providers.OracleBakery
	(*OracleBaseImages)(nil),        // 3: proto.providers.OracleBaseImages
	(*OracleBaseImage)(nil),         // 4: proto.providers.OracleBaseImage
	(*OracleVS)(nil),                // 5: proto.providers.OracleVS
	(*permissions.Permissions)(nil), // 6: proto.permissions.Permissions
}
var file_proto_deploymentConfigurations_providers_Oracle_proto_depIdxs = []int32{
	1, // 0: proto.providers.Oracle.accounts:type_name -> proto.providers.OracleAccounts
	2, // 1: proto.providers.Oracle.bakeryDefaults:type_name -> proto.providers.OracleBakery
	6, // 2: proto.providers.OracleAccounts.permissions:type_name -> proto.permissions.Permissions
	3, // 3: proto.providers.OracleBakery.baseImages:type_name -> proto.providers.OracleBaseImages
	4, // 4: proto.providers.OracleBaseImages.baseImage:type_name -> proto.providers.OracleBaseImage
	5, // 5: proto.providers.OracleBaseImages.virtualizationSettings:type_name -> proto.providers.OracleVS
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_deploymentConfigurations_providers_Oracle_proto_init() }
func file_proto_deploymentConfigurations_providers_Oracle_proto_init() {
	if File_proto_deploymentConfigurations_providers_Oracle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleBakery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleBaseImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleBaseImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleVS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_deploymentConfigurations_providers_Oracle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_deploymentConfigurations_providers_Oracle_proto_goTypes,
		DependencyIndexes: file_proto_deploymentConfigurations_providers_Oracle_proto_depIdxs,
		MessageInfos:      file_proto_deploymentConfigurations_providers_Oracle_proto_msgTypes,
	}.Build()
	File_proto_deploymentConfigurations_providers_Oracle_proto = out.File
	file_proto_deploymentConfigurations_providers_Oracle_proto_rawDesc = nil
	file_proto_deploymentConfigurations_providers_Oracle_proto_goTypes = nil
	file_proto_deploymentConfigurations_providers_Oracle_proto_depIdxs = nil
}
